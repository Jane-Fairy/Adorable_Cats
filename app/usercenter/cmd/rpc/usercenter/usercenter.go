// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenter

import (
	"context"

	"catroom/app/usercenter/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CatOrder                     = pb.CatOrder
	CatOrderDetailReq            = pb.CatOrderDetailReq
	CatOrderDetailResp           = pb.CatOrderDetailResp
	CreateCatOrderReq            = pb.CreateCatOrderReq
	CreateCatOrderResp           = pb.CreateCatOrderResp
	GenerateTokenReq             = pb.GenerateTokenReq
	GenerateTokenResp            = pb.GenerateTokenResp
	GetUserAuthByAuthKeyReq      = pb.GetUserAuthByAuthKeyReq
	GetUserAuthByAuthKeyResp     = pb.GetUserAuthByAuthKeyResp
	GetUserAuthByUserIdReq       = pb.GetUserAuthByUserIdReq
	GetUserAuthyUserIdResp       = pb.GetUserAuthyUserIdResp
	GetUserInfoReq               = pb.GetUserInfoReq
	GetUserInfoResp              = pb.GetUserInfoResp
	LoginReq                     = pb.LoginReq
	LoginResp                    = pb.LoginResp
	PetReq                       = pb.PetReq
	PetResp                      = pb.PetResp
	RegisterReq                  = pb.RegisterReq
	RegisterResp                 = pb.RegisterResp
	StatusInfo                   = pb.StatusInfo
	UpdateCatOrderTradeStateReq  = pb.UpdateCatOrderTradeStateReq
	UpdateCatOrderTradeStateResp = pb.UpdateCatOrderTradeStateResp
	User                         = pb.User
	UserAuth                     = pb.UserAuth
	UserCatOrderListReq          = pb.UserCatOrderListReq
	UserCatOrderListResp         = pb.UserCatOrderListResp

	Usercenter interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error)
		GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		PetInsert(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*PetResp, error)
		PetDelete(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*StatusInfo, error)
		FindPetOne(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*PetResp, error)
		PetEdit(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*StatusInfo, error)
		// Order rpc doc
		CatOrderCreate(ctx context.Context, in *CreateCatOrderReq, opts ...grpc.CallOption) (*CreateCatOrderResp, error)
		// cat order detail information
		CatOrderDetail(ctx context.Context, in *CatOrderDetailReq, opts ...grpc.CallOption) (*CatOrderDetailResp, error)
		// update cat order detail information
		CatOrderTradeStateUpdate(ctx context.Context, in *UpdateCatOrderTradeStateReq, opts ...grpc.CallOption) (*UpdateCatOrderTradeStateResp, error)
		// oder detail list info
		CatUserOrderList(ctx context.Context, in *UserCatOrderListReq, opts ...grpc.CallOption) (*UserCatOrderListResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByAuthKey(ctx context.Context, in *GetUserAuthByAuthKeyReq, opts ...grpc.CallOption) (*GetUserAuthByAuthKeyResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByAuthKey(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserAuthByUserId(ctx context.Context, in *GetUserAuthByUserIdReq, opts ...grpc.CallOption) (*GetUserAuthyUserIdResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GetUserAuthByUserId(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUsercenter) PetInsert(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*PetResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.PetInsert(ctx, in, opts...)
}

func (m *defaultUsercenter) PetDelete(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*StatusInfo, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.PetDelete(ctx, in, opts...)
}

func (m *defaultUsercenter) FindPetOne(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*PetResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.FindPetOne(ctx, in, opts...)
}

func (m *defaultUsercenter) PetEdit(ctx context.Context, in *PetReq, opts ...grpc.CallOption) (*StatusInfo, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.PetEdit(ctx, in, opts...)
}

// Order rpc doc
func (m *defaultUsercenter) CatOrderCreate(ctx context.Context, in *CreateCatOrderReq, opts ...grpc.CallOption) (*CreateCatOrderResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.CatOrderCreate(ctx, in, opts...)
}

// cat order detail information
func (m *defaultUsercenter) CatOrderDetail(ctx context.Context, in *CatOrderDetailReq, opts ...grpc.CallOption) (*CatOrderDetailResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.CatOrderDetail(ctx, in, opts...)
}

// update cat order detail information
func (m *defaultUsercenter) CatOrderTradeStateUpdate(ctx context.Context, in *UpdateCatOrderTradeStateReq, opts ...grpc.CallOption) (*UpdateCatOrderTradeStateResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.CatOrderTradeStateUpdate(ctx, in, opts...)
}

// oder detail list info
func (m *defaultUsercenter) CatUserOrderList(ctx context.Context, in *UserCatOrderListReq, opts ...grpc.CallOption) (*UserCatOrderListResp, error) {
	client := pb.NewUsercenterClient(m.cli.Conn())
	return client.CatUserOrderList(ctx, in, opts...)
}
