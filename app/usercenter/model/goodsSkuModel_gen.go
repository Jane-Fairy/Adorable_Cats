// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsSkuFieldNames          = builder.RawFieldNames(&GoodsSku{})
	goodsSkuRows                = strings.Join(goodsSkuFieldNames, ",")
	goodsSkuRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsSkuFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsSkuRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsSkuFieldNames, "`goods_sku_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsSkuModel interface {
		Insert(ctx context.Context, data *GoodsSku) (sql.Result, error)
		FindOne(ctx context.Context, goodsSkuId string) (*GoodsSku, error)
		Update(ctx context.Context, data *GoodsSku) error
		Delete(ctx context.Context, goodsSkuId string) error
	}

	defaultGoodsSkuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsSku struct {
		GoodsSkuId  string  `db:"goods_sku_id"` // 商品规格id
		GoodsId     int64   `db:"goods_id"`     // 商品id
		SpecSkuId   string  `db:"spec_sku_id"`  // 商品sku记录索引 (由规格id组成)
		ImageId     int64   `db:"image_id"`     // 图片id
		GoodsNo     string  `db:"goods_no"`     // 商品编码
		GoodsPrice  float64 `db:"goods_price"`  // 商品价格
		LinePrice   float64 `db:"line_price"`   // 商品划线价
		StockNum    int64   `db:"stock_num"`    // 当前库存数量
		GoodsSales  int64   `db:"goods_sales"`  // 商品销量
		GoodsWeight float64 `db:"goods_weight"` // 商品重量(Kg)
		CreateTime  int64   `db:"create_time"`  // 创建时间
		UpdateTime  int64   `db:"update_time"`  // 更新时间
	}
)

func newGoodsSkuModel(conn sqlx.SqlConn) *defaultGoodsSkuModel {
	return &defaultGoodsSkuModel{
		conn:  conn,
		table: "`goods_sku`",
	}
}

func (m *defaultGoodsSkuModel) withSession(session sqlx.Session) *defaultGoodsSkuModel {
	return &defaultGoodsSkuModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods_sku`",
	}
}

func (m *defaultGoodsSkuModel) Delete(ctx context.Context, goodsSkuId string) error {
	query := fmt.Sprintf("delete from %s where `goods_sku_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, goodsSkuId)
	return err
}

func (m *defaultGoodsSkuModel) FindOne(ctx context.Context, goodsSkuId string) (*GoodsSku, error) {
	query := fmt.Sprintf("select %s from %s where `goods_sku_id` = ? limit 1", goodsSkuRows, m.table)
	var resp GoodsSku
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodsSkuId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsSkuModel) Insert(ctx context.Context, data *GoodsSku) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsSkuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GoodsSkuId, data.GoodsId, data.SpecSkuId, data.ImageId, data.GoodsNo, data.GoodsPrice, data.LinePrice, data.StockNum, data.GoodsSales, data.GoodsWeight)
	return ret, err
}

func (m *defaultGoodsSkuModel) Update(ctx context.Context, data *GoodsSku) error {
	query := fmt.Sprintf("update %s set %s where `goods_sku_id` = ?", m.table, goodsSkuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GoodsId, data.SpecSkuId, data.ImageId, data.GoodsNo, data.GoodsPrice, data.LinePrice, data.StockNum, data.GoodsSales, data.GoodsWeight, data.GoodsSkuId)
	return err
}

func (m *defaultGoodsSkuModel) tableName() string {
	return m.table
}
