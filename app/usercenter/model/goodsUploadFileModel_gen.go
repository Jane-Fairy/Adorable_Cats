// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsUploadFileFieldNames          = builder.RawFieldNames(&GoodsUploadFile{})
	goodsUploadFileRows                = strings.Join(goodsUploadFileFieldNames, ",")
	goodsUploadFileRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsUploadFileFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsUploadFileRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsUploadFileFieldNames, "`file_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsUploadFileModel interface {
		Insert(ctx context.Context, data *GoodsUploadFile) (sql.Result, error)
		FindOne(ctx context.Context, fileId string) (*GoodsUploadFile, error)
		Update(ctx context.Context, data *GoodsUploadFile) error
		Delete(ctx context.Context, fileId string) error
	}

	defaultGoodsUploadFileModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsUploadFile struct {
		FileId     string    `db:"file_id"`    // 文件id
		Storage    string    `db:"storage"`    // 存储方式
		FileUrl    string    `db:"file_url"`   // 存储域名
		FileName   string    `db:"file_name"`  // 文件路径
		FileSize   int64     `db:"file_size"`  // 文件大小(字节)
		FileType   string    `db:"file_type"`  // 文件类型
		Extension  string    `db:"extension"`  // 文件扩展名
		IsUser     int64     `db:"is_user"`    // 是否为c端用户上传
		IsRecycle  int64     `db:"is_recycle"` // 是否已回收
		IsDelete   int64     `db:"is_delete"`  // 软删除
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
	}
)

func newGoodsUploadFileModel(conn sqlx.SqlConn) *defaultGoodsUploadFileModel {
	return &defaultGoodsUploadFileModel{
		conn:  conn,
		table: "`goods_upload_file`",
	}
}

func (m *defaultGoodsUploadFileModel) withSession(session sqlx.Session) *defaultGoodsUploadFileModel {
	return &defaultGoodsUploadFileModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods_upload_file`",
	}
}

func (m *defaultGoodsUploadFileModel) Delete(ctx context.Context, fileId string) error {
	query := fmt.Sprintf("delete from %s where `file_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, fileId)
	return err
}

func (m *defaultGoodsUploadFileModel) FindOne(ctx context.Context, fileId string) (*GoodsUploadFile, error) {
	query := fmt.Sprintf("select %s from %s where `file_id` = ? limit 1", goodsUploadFileRows, m.table)
	var resp GoodsUploadFile
	err := m.conn.QueryRowCtx(ctx, &resp, query, fileId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsUploadFileModel) Insert(ctx context.Context, data *GoodsUploadFile) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsUploadFileRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FileId, data.Storage, data.FileUrl, data.FileName, data.FileSize, data.FileType, data.Extension, data.IsUser, data.IsRecycle, data.IsDelete, data.DeleteTime, data.DelState)
	return ret, err
}

func (m *defaultGoodsUploadFileModel) Update(ctx context.Context, data *GoodsUploadFile) error {
	query := fmt.Sprintf("update %s set %s where `file_id` = ?", m.table, goodsUploadFileRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Storage, data.FileUrl, data.FileName, data.FileSize, data.FileType, data.Extension, data.IsUser, data.IsRecycle, data.IsDelete, data.DeleteTime, data.DelState, data.FileId)
	return err
}

func (m *defaultGoodsUploadFileModel) tableName() string {
	return m.table
}
