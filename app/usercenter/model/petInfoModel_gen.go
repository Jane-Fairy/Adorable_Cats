// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	petInfoFieldNames          = builder.RawFieldNames(&PetInfo{})
	petInfoRows                = strings.Join(petInfoFieldNames, ",")
	petInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(petInfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	petInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(petInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	petInfoModel interface {
		Insert(ctx context.Context, data *PetInfo) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*PetInfo, error)
		Update(ctx context.Context, data *PetInfo) error
		Delete(ctx context.Context, id string) error
	}

	defaultPetInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PetInfo struct {
		Id           string         `db:"id"`            // 宠物ID，主键，自增
		Name         sql.NullString `db:"name"`          // 宠物名称
		Type         sql.NullString `db:"type"`          // 宠物类型
		Breed        sql.NullString `db:"breed"`         // 宠物品种
		DateOfBirth  sql.NullTime   `db:"date_of_birth"` // 出生日期
		Gender       sql.NullString `db:"gender"`        // 性别
		OwnerName    sql.NullString `db:"owner_name"`    // 主人姓名
		OwnerContact sql.NullString `db:"owner_contact"` // 主人联系方式
		CreateTime   time.Time      `db:"create_time"`   // 创建时间
		UpdateTime   time.Time      `db:"update_time"`   // 更新时间
		DeleteTime   time.Time      `db:"delete_time"`   // 删除时间
		DelState     int64          `db:"del_state"`     // 删除状态
		Version      int64          `db:"version"`       // 版本号
		Note         sql.NullString `db:"note"`          // 备注
	}
)

func newPetInfoModel(conn sqlx.SqlConn) *defaultPetInfoModel {
	return &defaultPetInfoModel{
		conn:  conn,
		table: "`pet_info`",
	}
}

func (m *defaultPetInfoModel) withSession(session sqlx.Session) *defaultPetInfoModel {
	return &defaultPetInfoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`pet_info`",
	}
}

func (m *defaultPetInfoModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPetInfoModel) FindOne(ctx context.Context, id string) (*PetInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", petInfoRows, m.table)
	var resp PetInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPetInfoModel) Insert(ctx context.Context, data *PetInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, petInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Type, data.Breed, data.DateOfBirth, data.Gender, data.OwnerName, data.OwnerContact, data.DeleteTime, data.DelState, data.Version, data.Note)
	return ret, err
}

func (m *defaultPetInfoModel) Update(ctx context.Context, data *PetInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, petInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Breed, data.DateOfBirth, data.Gender, data.OwnerName, data.OwnerContact, data.DeleteTime, data.DelState, data.Version, data.Note, data.Id)
	return err
}

func (m *defaultPetInfoModel) tableName() string {
	return m.table
}
