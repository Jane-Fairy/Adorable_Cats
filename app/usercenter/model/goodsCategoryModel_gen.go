// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsCategoryFieldNames          = builder.RawFieldNames(&GoodsCategory{})
	goodsCategoryRows                = strings.Join(goodsCategoryFieldNames, ",")
	goodsCategoryRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsCategoryFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsCategoryRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsCategoryFieldNames, "`category_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsCategoryModel interface {
		Insert(ctx context.Context, data *GoodsCategory) (sql.Result, error)
		FindOne(ctx context.Context, categoryId string) (*GoodsCategory, error)
		Update(ctx context.Context, data *GoodsCategory) error
		Delete(ctx context.Context, categoryId string) error
	}

	defaultGoodsCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsCategory struct {
		CategoryId string    `db:"category_id"` // 商品分类id
		Name       string    `db:"name"`        // 分类名称
		ParentId   int64     `db:"parent_id"`   // 上级分类id
		ImageId    int64     `db:"image_id"`    // 分类图片id
		Sort       int64     `db:"sort"`        // 排序方式(数字越小越靠前)
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
	}
)

func newGoodsCategoryModel(conn sqlx.SqlConn) *defaultGoodsCategoryModel {
	return &defaultGoodsCategoryModel{
		conn:  conn,
		table: "`goods_category`",
	}
}

func (m *defaultGoodsCategoryModel) withSession(session sqlx.Session) *defaultGoodsCategoryModel {
	return &defaultGoodsCategoryModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods_category`",
	}
}

func (m *defaultGoodsCategoryModel) Delete(ctx context.Context, categoryId string) error {
	query := fmt.Sprintf("delete from %s where `category_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, categoryId)
	return err
}

func (m *defaultGoodsCategoryModel) FindOne(ctx context.Context, categoryId string) (*GoodsCategory, error) {
	query := fmt.Sprintf("select %s from %s where `category_id` = ? limit 1", goodsCategoryRows, m.table)
	var resp GoodsCategory
	err := m.conn.QueryRowCtx(ctx, &resp, query, categoryId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsCategoryModel) Insert(ctx context.Context, data *GoodsCategory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, goodsCategoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CategoryId, data.Name, data.ParentId, data.ImageId, data.Sort, data.DeleteTime, data.DelState)
	return ret, err
}

func (m *defaultGoodsCategoryModel) Update(ctx context.Context, data *GoodsCategory) error {
	query := fmt.Sprintf("update %s set %s where `category_id` = ?", m.table, goodsCategoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.ImageId, data.Sort, data.DeleteTime, data.DelState, data.CategoryId)
	return err
}

func (m *defaultGoodsCategoryModel) tableName() string {
	return m.table
}
