// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
	goodsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsFieldNames, "`goods_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsModel interface {
		Insert(ctx context.Context, data *Goods) (sql.Result, error)
		FindOne(ctx context.Context, goodsId string) (*Goods, error)
		Update(ctx context.Context, data *Goods) error
		Delete(ctx context.Context, goodsId string) error
	}

	defaultGoodsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Goods struct {
		GoodsId         string    `db:"goods_id"`          // 商品id
		GoodsName       string    `db:"goods_name"`        // 商品名称
		SellingPoint    string    `db:"selling_point"`     // 商品卖点
		CategoryId      int64     `db:"category_id"`       // 商品分类id
		DeductStockType int64     `db:"deduct_stock_type"` // 库存计算方式(10下单减库存 20付款减库存)
		Content         string    `db:"content"`           // 商品详情
		SalesInitial    int64     `db:"sales_initial"`     // 初始销量
		SalesActual     int64     `db:"sales_actual"`      // 实际销量
		GoodsSort       int64     `db:"goods_sort"`        // 商品排序(数字越小越靠前)
		GoodsStatus     int64     `db:"goods_status"`      // 商品状态(10上架 20下架)
		IsDelete        int64     `db:"is_delete"`         // 是否删除
		CreateTime      time.Time `db:"create_time"`
		UpdateTime      time.Time `db:"update_time"`
		DeleteTime      time.Time `db:"delete_time"`
		DelState        int64     `db:"del_state"`
	}
)

func newGoodsModel(conn sqlx.SqlConn) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  conn,
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) withSession(session sqlx.Session) *defaultGoodsModel {
	return &defaultGoodsModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods`",
	}
}

func (m *defaultGoodsModel) Delete(ctx context.Context, goodsId string) error {
	query := fmt.Sprintf("delete from %s where `goods_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, goodsId)
	return err
}

func (m *defaultGoodsModel) FindOne(ctx context.Context, goodsId string) (*Goods, error) {
	query := fmt.Sprintf("select %s from %s where `goods_id` = ? limit 1", goodsRows, m.table)
	var resp Goods
	err := m.conn.QueryRowCtx(ctx, &resp, query, goodsId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) Insert(ctx context.Context, data *Goods) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.GoodsId, data.GoodsName, data.SellingPoint, data.CategoryId, data.DeductStockType, data.Content, data.SalesInitial, data.SalesActual, data.GoodsSort, data.GoodsStatus, data.IsDelete, data.DeleteTime, data.DelState)
	return ret, err
}

func (m *defaultGoodsModel) Update(ctx context.Context, data *Goods) error {
	query := fmt.Sprintf("update %s set %s where `goods_id` = ?", m.table, goodsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.GoodsName, data.SellingPoint, data.CategoryId, data.DeductStockType, data.Content, data.SalesInitial, data.SalesActual, data.GoodsSort, data.GoodsStatus, data.IsDelete, data.DeleteTime, data.DelState, data.GoodsId)
	return err
}

func (m *defaultGoodsModel) tableName() string {
	return m.table
}
