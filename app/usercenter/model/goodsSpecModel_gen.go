// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsSpecFieldNames          = builder.RawFieldNames(&GoodsSpec{})
	goodsSpecRows                = strings.Join(goodsSpecFieldNames, ",")
	goodsSpecRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsSpecFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodsSpecRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsSpecFieldNames, "`spec_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodsSpecModel interface {
		Insert(ctx context.Context, data *GoodsSpec) (sql.Result, error)
		FindOne(ctx context.Context, specId string) (*GoodsSpec, error)
		Update(ctx context.Context, data *GoodsSpec) error
		Delete(ctx context.Context, specId string) error
	}

	defaultGoodsSpecModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsSpec struct {
		SpecId     string `db:"spec_id"`     // 规格组id
		SpecName   string `db:"spec_name"`   // 规格组名称
		CreateTime int64  `db:"create_time"` // 创建时间
	}
)

func newGoodsSpecModel(conn sqlx.SqlConn) *defaultGoodsSpecModel {
	return &defaultGoodsSpecModel{
		conn:  conn,
		table: "`goods_spec`",
	}
}

func (m *defaultGoodsSpecModel) withSession(session sqlx.Session) *defaultGoodsSpecModel {
	return &defaultGoodsSpecModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`goods_spec`",
	}
}

func (m *defaultGoodsSpecModel) Delete(ctx context.Context, specId string) error {
	query := fmt.Sprintf("delete from %s where `spec_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, specId)
	return err
}

func (m *defaultGoodsSpecModel) FindOne(ctx context.Context, specId string) (*GoodsSpec, error) {
	query := fmt.Sprintf("select %s from %s where `spec_id` = ? limit 1", goodsSpecRows, m.table)
	var resp GoodsSpec
	err := m.conn.QueryRowCtx(ctx, &resp, query, specId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsSpecModel) Insert(ctx context.Context, data *GoodsSpec) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, goodsSpecRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SpecId, data.SpecName)
	return ret, err
}

func (m *defaultGoodsSpecModel) Update(ctx context.Context, data *GoodsSpec) error {
	query := fmt.Sprintf("update %s set %s where `spec_id` = ?", m.table, goodsSpecRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SpecName, data.SpecId)
	return err
}

func (m *defaultGoodsSpecModel) tableName() string {
	return m.table
}
